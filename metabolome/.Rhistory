install.packages("reticulate")
library(reticulate)
use_python("/Users/lucc/miniconda3/bin/python")
reticulate::py_config()
y
reticulate::py_config()
n
reticulate::py_config()
reticulate::repl_python()
library("karyoploteR")
library("RIdeogram")
library("argparser")
install.packages('BiocManager')
BiocManager::install("karyoploteR")
library("karyoploteR")
library("karyoploteR")
library("RIdeogram")
library(ggplot2)
library(ggsci)
library(argparser)
library(tidyr)
library(stringr)
library(ggplot2)
pwd <- "/Users/lucc/Desktop"
d <- 'dog.breed.txt.plot'
d_t <-table(d)
d <- read.table( 'dog.breed.txt.plot',header = T)
pwd <- "/Users/lucc/Desktop"
d <- read.table( 'dog.breed.txt.plot',header = T)
pwd <- "/Users/lucc/Desktop"
d <- read.table('dog.breed.txt.plot',header = T)
d <- read.table('dog.breed.txt.plot',header = T)
pwd <- "/Users/lucc/Desktop"
d <- read.table('dog.breed.txt.plot',header = T)
d <- read.table('/Users/lucc/Desktop/dog.breed.txt.plot',header = T)
d <- read.table('/Users/lucc/Desktop/dog.breed.txt.plot',header = T,sep = "\t")
View(d)
d <- read.table('/Users/lucc/Desktop/dog.breed.txt.plot',header = F,sep = "\t")
View(d)
d_t <-table(d)
d_t <-data.frame(table(d))
View(d_t)
ggplot(d_t,aes(V1,Freq))+
geom_bar(stat="summary",position="dodge")
View(d_t)
ggplot(d_t,aes(V1,Freq))+
geom_bar(position="dodge")
ggplot(d_t,aes(V1,Freq))+
geom_bar()
ggplot(d_t,aes(V1))+
geom_bar()
ggplot(d_t,aes(V1))+
geom_bar(stat=”“identity”)
ggplot(d_t,aes(V1))+
geom_bar(stat='identity')
ggplot(d_t)+
geom_bar(stat='identity',aes(V1))
ggplot(d_t,aes(x=V1,y=Freq))+
geom_bar(stat='identity')
ggplot(d_t,aes(x=V1,y=Freq,fill=V1))+
geom_bar(stat='identity')
View(d_t)
View(d)
library(ggplot2)
pwd <- "/Users/lucc/Desktop"
d <- read.table('/Users/lucc/Desktop/dog.breed.txt.plot',header = F,sep = "\t")
View(d)
View(d)
ggplot(d,aes(x=V2,fill=V2))+
geom_bar(stat='identity')
d_t <-data.frame(table(d$V2))
View(d_t)
ggplot(d_t,aes(x=V1,y=Freq,fill=V2))+
geom_bar(stat='identity')
View(d_t)
ggplot(d_t,aes(x=Var1,y=Freq,fill=V2))+
geom_bar(stat='identity')
ggplot(d_t,aes(x=Var1,y=Freq,fill=Var1))+
geom_bar(stat='identity')
ggplot(d_t,aes(x=Var1,y=Freq,fill=Var1))+
geom_bar(stat='identity')+scale_fill_discrete(guide = FALSE)
ggplot(d_t,aes(x=Var1,y=Freq,fill=Var1))+
geom_bar(stat='identity')+scale_fill_discrete(guide = FALSE)+
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))
ggplot(d_t,aes(x=Var1,y=Freq,fill=Var1))+
geom_bar(stat='identity')+scale_fill_discrete(guide = FALSE)+
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))=
geom_text(aes(label=Freq),size=4,vjust=-0.5)+
)
ggplot(d_t,aes(x=Var1,y=Freq,fill=Var1))+
geom_bar(stat='identity')+scale_fill_discrete(guide = FALSE)+
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))=
geom_text(aes(label=Freq),size=4,vjust=-0.5)
ggplot(d_t,aes(x=Var1,y=Freq,fill=Var1))+
geom_bar(stat='identity')+scale_fill_discrete(guide = FALSE)+
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))+
geom_text(aes(label=Freq),size=4,vjust=-0.5)
ggplot(d_t,aes(x=Var1,y=Freq,fill=Var1))+
geom_bar(stat='identity')+scale_fill_discrete(guide = FALSE)+
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))+
geom_text(aes(label=Freq),size=1,vjust=-0.5)
ggplot(d_t,aes(x=Var1,y=Freq,fill=Var1))+
geom_bar(stat='identity')+scale_fill_discrete(guide = FALSE)+
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))+
geom_text(aes(label=Freq),size=3,vjust=-0.5)
ggplot(d_t,aes(x=Var1,y=Freq,fill=Var1))+
geom_bar(stat='identity')+scale_fill_discrete(guide = FALSE)+
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))+
geom_text(aes(label=Freq),size=3,vjust=-0.5)+xlab("breed")
124.8*2
124.8*2 + 152.8
124.8*2 + 152.8 - 110
124.8*2 + 152.8 - 110
50 *96
1900+ 110*2 +250 +550
1900+ 110*2 +250 +550+650
4195937/4738770
library(Seurat)
library(dplyr)
library(magrittr)
library(hdf5r)
library(Seurat)
library(Seurat)
library(dplyr)
library(ggplot2)
library(clustree)
library(SingleCellExperiment)
library(CellTrails)
library(scater)
BiocManager::install("scater")
library(scater)
library(Seurat)
library(dplyr)
library(ggplot2)
library(clustree)
library(SingleCellExperiment)
library(CellTrails)
library(scater)
library(ggplot2)
library(SingleCellExperiment)
# -- load dataset ####
write.path<- "/Users/lucc/Desktop/zyf/jak_stat"
sce <- readRDS(paste(write.path,"DataNorm_P7.P11.30.38.96_tsne1.rds",sep=""))
sce <- readRDS(paste(write.path,"JAK_STAT_Norm_P7.P11.30.38.96_tsne1.rds",sep=""))
# -- load dataset ####
write.path<- "/Users/lucc/Desktop/zyf/jak_stat"
# -- load dataset ####
write.path<- "/Users/lucc/Desktop/zyf/jak_stat/"
sce <- readRDS(paste(write.path,"JAK_STAT_Norm_P7.P11.30.38.96_tsne1.rds",sep=""))
counts(sce)[1:5,1:10]
reducedDims(sce)
assays(sce)
# -- obtain data： ####
tsne <- sce@int_colData@listData[["reducedDims"]]@listData[["CellTrails.tSNE"]]
counts <- counts(sce)
logcounts <- logcounts(sce)
cellid <- sce@colData@listData$CellId   # cell annotations
state <- sce@colData@listData$CellTrails.state
# -- Get tsne dimplot:  ####
t.data <- data.frame(cellid=cellid,state=state,tsne)
names(t.data)
names(t.data) <- c("cellid", "state",  "tSNE1","tSNE2")
ggplot(t.data,aes(x=tSNE1,y=tSNE2))+
geom_point(aes(color=cellid),size=0.5)+
theme_classic()
# -- check genes expression in publication:  ####
genet <- "ATOH1"  # change gene name accordingly
exp <- logcounts[genet,] # get gene expression level (log)
tg.data <- data.frame(cellid=cellid,state=state,tsne,exp)
names(tg.data)
names(tg.data) <-  c("cellid", "state",  "tSNE1","tSNE2","Exp")
ggplot(tg.data,aes(x=tSNE1,y=tSNE2))+
geom_point(aes(color=Exp),size=0.5)+
scale_color_gradient(low = "grey90", high = "darkred")+
ggtitle(genet)+
theme_classic()
# -- dimplot for target genes: ####
gene <- c("NTF3",
"HMGN4",
"CAMTA1",
"HES6",
"EZR",
"FGF20",
"MDFI",
"MEX3A",
"EMX2",
"COL8A1",
"ISLR",
"CCND2",
"HSPB1",
"ENPP2",
"GSN",
"PTN"  )
genet <- gene[1] # change gene name accordingly
exp <- logcounts[genet,] # get gene expression level (log)
tg.data <- data.frame(cellid=cellid,state=state,tsne,exp)
names(tg.data)
names(tg.data) <-  c("cellid", "state",  "tSNE1","tSNE2","Exp")
ggplot(tg.data,aes(x=tSNE1,y=tSNE2))+
geom_point(aes(color=Exp),size=0.5)+
scale_color_gradient(low = "grey90", high = "darkred")+
ggtitle(genet)+
theme_classic()
setwd('/Users/lucc/Desktop/lcc_new_script/metabolome')
d_info <- read.table('metabolome_info_data.txt',sep = '\t',header = T)
d <- read.table('metabolome.txt',sep = '\t',header = T)
View(d_info)
d <- read.table('metabolome.txt',sep = '\t',header = T)
d <- read.table('metabolome.txt',sep = '\t',header = T)
d <- read.table('metabolome.txt',sep = '\t')
d <- read.table('metabolome.txt',sep = '\t',header = T)
View(d)
# -- load dataset ####
write.path<- "/Users/lucc/Desktop/zyf/jak_stat/"
setwd(write.path)
sce <- readRDS(paste(write.path,"JAK_STAT_Norm_P7.P11.30.38.96_tsne1.rds",sep=""))
###
### 获得原始表达矩阵 ##
counts <- counts(sce)
View(counts)
counts <-d
#write.table(counts,'row_count.txt',quote = FALSE,sep = "\t")
#log
counts.LogNormalize <- log1p(t(t(counts) / colSums(counts)) * 10000)
View(counts)
###
### 获得原始表达矩阵 ##
counts <- counts(sce)
View(counts)
counts <- as.matrix(d)
#write.table(counts,'row_count.txt',quote = FALSE,sep = "\t")
#log
counts.LogNormalize <- log1p(t(t(counts) / colSums(counts)) * 10000)
t(counts)
d
View(d)
d <- read.table('metabolome.txt',sep = '\t',header = T,row.names = 1)
d <- na.omit(d)
View(d)
View(d)
d <- read.table('metabolome.txt',sep = '\t',header = T,row.names = 1)
setwd('/Users/lucc/Desktop/lcc_new_script/metabolome')
d_info <- read.table('metabolome_info_data.txt',sep = '\t',header = T)
d <- read.table('metabolome.txt',sep = '\t',header = T,row.names = 1)
View(d)
counts <- as.matrix(d)
#write.table(counts,'row_count.txt',quote = FALSE,sep = "\t")
#log
counts.LogNormalize <- log1p(t(t(counts) / colSums(counts)) * 10000)
# scale
scaled_data <- t(scale(t(counts.LogNormalize)))
####### pca
pca.results <- prcomp(x = scaled_data,rank. = 10)
pac.matrix <- pca.results$rotation
######## KNN  FindNeighbors
#1 使用10个PC
a=new(Class = RcppAnnoy::AnnoyEuclidean, f=10)
#2 求距离的输入数据为每个细胞的RNA表达量的前10个PC
pac.matrix
for(ii in seq(nrow(pac.matrix)) ){
a$addItem(ii-1, pac.matrix[ii,])
}
#3 建立树的索引，默认建立50棵树
a$build(50)
#4 对于每个细胞，求其前k个最近邻细胞
index=a #第3中建立的索引
query=pac.matrix #要搜索的数据，就是每个细胞的PC矩阵
k=20 #最近邻的几个点？
search.k=-1 #不限制搜索次数
include.distance=T #是否返回距离
nn <- matrix(data=rep(0, nrow(pac.matrix)**2),nrow=nrow(pac.matrix), ncol=nrow(pac.matrix))
dim(nn)
for(x in 1:nrow(pac.matrix)){
res <- index$getNNsByVectorList(pac.matrix[x, ], k, search.k, include.distance)
res2=list(res$item + 1, res$distance) #C++下标是0-based，变为R的1-based
nn[x, res2[[1]]] = 1
}
rownames(nn)=rownames(pac.matrix)
colnames(nn)=rownames(pac.matrix)
########### FindClusters
class(nn)
nn2=as(nn, "dgCMatrix")
# check: 检测大小
object.size(nn)
object.size(nn2)
# 转为3列
df_nn=as.data.frame(summary(nn2))
# Louvain  算法
library(igraph)
edges <- df_nn
colnames(edges) <- c("from", "to", "weight")
#Create graph for the algorithms
g <- graph_from_data_frame(edges, directed = FALSE)
# Louvain
lc <- cluster_louvain(g)
head(membership(lc))
str(lc)
communities(lc)
plot(lc, g)
# make data.frame from Louvain result
lc_df=data.frame(cell=as.numeric(lc$names), cid=lc$membership)
lc_df=lc_df[order(lc_df$cell),]
#tsne
tsne_out = Rtsne(
pac.matrix,
dims = 2,
theta = 0.1
)
tsne_zz <- tsne_out$Y
library(Rtsne)
library(umap)
#tsne
tsne_out = Rtsne(
pac.matrix,
dims = 2,
theta = 0.1
)
tsne_zz <- tsne_out$Y
t.data_zz <- data.frame(lc_df,tsne_zz)
colnames(t.data_zz) <- c("cell", "state",  "tSNE1","tSNE2")
tsne_zz
lc_df <- d_info[c(1,2),]
lc_df
lc_df <- d_info[,c(1,2)]
lc_df
t.data_zz <- data.frame(lc_df,tsne_zz)
colnames(t.data_zz) <- c("cell", "state",  "tSNE1","tSNE2")
ggplot(t.data_zz,aes(x=tSNE1,y=tSNE2))+
geom_point(aes(color=factor(state)),size=2)+
theme_classic()
library(ggplot2)
ggplot(t.data_zz,aes(x=tSNE1,y=tSNE2))+
geom_point(aes(color=factor(state)),size=2)+
theme_classic()
####### pca
pca.results <- prcomp(x = scaled_data,rank. = 2)
pac.matrix <- pca.results$rotation
pac.matrix
umap.data_zz2 <- data.frame(lc_df,pac.matrix)
colnames(umap.data_zz2) <- c("cell", "state",  "PC1","PC2")
ggplot(umap.data_zz2,aes(x=umap1,y=umap2))+
geom_point(aes(color=factor(state)),size=2)+
theme_classic()
ggplot(umap.data_zz2,aes(x=PC1,y=PC2))+
geom_point(aes(color=factor(state)),size=2)+
theme_classic()
install.packages("devtools")
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
metanr_packages <- function(){
metr_pkgs <- c("impute", "pcaMethods", "globaltest", "GlobalAncova", "Rgraphviz", "preprocessCore", "genefilter", "SSPA", "sva", "limma", "KEGGgraph", "siggenes","BiocParallel", "MSnbase", "multtest", "RBGL", "edgeR", "fgsea", "devtools", "crmn")
list_installed <- installed.packages()
new_pkgs <- subset(metr_pkgs, !(metr_pkgs %in% list_installed[, "Package"]))
if(length(new_pkgs)!=0){if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(new_pkgs)
print(c(new_pkgs, " packages added..."))
}
if((length(new_pkgs)<1)){
print("No new packages added...")
}
}
metanr_packages()
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
install.packages("leidenbase")
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
